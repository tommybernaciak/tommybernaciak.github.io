{"version":3,"sources":["constants.ts","components/top-navbar/TopNavbar.tsx","components/about/About.tsx","components/contact/Contact.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["PAGE","TopNavbar","_ref","setPage","react_default","a","createElement","navbar","className","Group","align","Alignment","LEFT","Heading","RIGHT","buttons","icon","text","onClick","ABOUT","CONTACT","About","card","elevation","Elevation","ZERO","window","open","minimal","callout","title","Contact","href","App","_useState","useState","_useState2","Object","slicedToArray","page","top_navbar_TopNavbar","about_About","contact_Contact","renderPage","Boolean","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6f2e986f.chunk.js","sourcesContent":["export enum PAGE {\n  ABOUT = \"about\",\n  CONTACT = \"contact\",\n  BLOG = \"blog\"\n}\n","import React, { Dispatch, SetStateAction } from \"react\";\nimport { Navbar, Alignment, Button } from \"@blueprintjs/core\";\nimport \"./../App.css\";\nimport { PAGE } from \"./../../constants\";\n\ninterface IProps {\n  setPage: Dispatch<SetStateAction<PAGE>>;\n}\n\nconst TopNavbar: React.FC<IProps> = ({ setPage }) => {\n  return (\n    <Navbar className=\"navbar\">\n      <Navbar.Group align={Alignment.LEFT}>\n        <Navbar.Heading className=\"navbar-heading\">Tommy Bernaciak</Navbar.Heading>\n      </Navbar.Group>\n      <Navbar.Group align={Alignment.RIGHT}>\n        <Button\n          className=\"bp3-minimal\"\n          icon=\"user\"\n          text=\"About\"\n          onClick={() => setPage(PAGE.ABOUT)}\n        />\n        {/* <Button\n          className=\"bp3-minimal\"\n          icon=\"annotation\"\n          text=\"Blog\"\n          onClick={() => setPage(PAGE.BLOG)}\n        /> */}\n        <Button\n          className=\"bp3-minimal\"\n          icon=\"envelope\"\n          text=\"Contact\"\n          onClick={() => setPage(PAGE.CONTACT)}\n        />\n      </Navbar.Group>\n    </Navbar>\n  );\n};\n\nexport default TopNavbar;\n","import React from \"react\";\nimport { Card, Elevation, Callout, Button } from \"@blueprintjs/core\";\nimport \"./../App.css\";\n\nconst About: React.FC = () => {\n  return (\n    <Card className=\"content-box\" elevation={Elevation.ZERO}>\n      <p>Hi, my name is Tommy and I am a software engineer and a web developer.</p>\n      <p>I'm proud to have worked with some awesome companies:</p>\n\n      <div className=\"button-group\">\n        <Button\n          className=\"button\"\n          onClick={() => window.open(\"https://www.binarapps.com/\")}\n          minimal\n        >\n          BINARAPPS\n        </Button>\n        <Button\n          className=\"button\"\n          onClick={() => window.open(\"https://www.stratajet.com/\")}\n          minimal\n        >\n          STRATAJET\n        </Button>\n        <Button className=\"button\" onClick={() => window.open(\"https://www.gabi.com/\")} minimal>\n          GABI\n        </Button>\n      </div>\n      <div className=\"button-group\">\n        <Button className=\"button\" onClick={() => window.open(\"https://www.abb.com/\")} minimal>\n          ABB\n        </Button>\n        <Button\n          className=\"button\"\n          onClick={() => window.open(\"https://www.biotechnologia.pl/\")}\n          minimal\n        >\n          BIO-TECH MEDIA\n        </Button>\n        <Button className=\"button\" onClick={() => window.open(\"http://www.lokoom.eu/\")} minimal>\n          LOKOOM\n        </Button>\n      </div>\n\n      <Callout className=\"callout\" title=\"Let's Work Together!\" />\n    </Card>\n  );\n};\n\nexport default About;\n","import React from \"react\";\nimport { Card, Elevation, Button } from \"@blueprintjs/core\";\n\nconst Contact: React.FC = () => {\n  return (\n    <Card className=\"content-box\" elevation={Elevation.ZERO}>\n      <div className=\"contact\">\n        <p>tommybernaciak.com Tomasz Bernaciak</p>\n        <p>contact@tommybernaciak.com</p>\n        <p>\n          <a href=\"tel:+48666393797\">+48 666 393 797</a>\n        </p>\n        <p>Al. ks. kard. S. Wyszyńskiego 40, 94-047 Łódź Poland</p>\n        <p>NIP 9471996564</p>\n        <p>REGON 380016819</p>\n      </div>\n\n      <div className=\"button-group\">\n        <Button\n          className=\"button\"\n          onClick={() => window.open(\"https://www.linkedin.com/in/tommy-bernaciak/\")}\n          minimal\n        >\n          LinkedIn\n        </Button>\n        <Button\n          className=\"button\"\n          onClick={() => window.open(\"https://twitter.com/tommybernaciak\")}\n          minimal\n        >\n          Twitter\n        </Button>\n        <Button\n          className=\"button\"\n          onClick={() => window.open(\"https://github.com/tommybernaciak\")}\n          minimal\n        >\n          GitHub\n        </Button>\n      </div>\n    </Card>\n  );\n};\n\nexport default Contact;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { TopNavbar } from \"./top-navbar\";\nimport { About } from \"./about\";\nimport { Contact } from \"./contact\";\nimport { PAGE } from \"./../constants\";\n\nconst App: React.FC = () => {\n  const [page, setPage] = useState<PAGE>(PAGE.ABOUT);\n\n  const renderPage = () => {\n    switch (page) {\n      case PAGE.ABOUT: {\n        return <About />;\n      }\n      case PAGE.CONTACT: {\n        return <Contact />;\n      }\n    }\n  };\n  return (\n    <div className=\"App\">\n      <div className=\"wrapper\">\n        <TopNavbar setPage={setPage} />\n      </div>\n      <div className=\"wrapper\">{renderPage()}</div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}