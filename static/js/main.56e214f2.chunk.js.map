{"version":3,"sources":["components/About.tsx","components/Header.tsx","components/Social.tsx","components/Contact.tsx","utils/i18next.ts","components/LanguageButton.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","main","Object","defineProperty","width","paddingLeft","paddingRight","breakpoints","down","about","fontSize","fontWeight","lineHeight","marginBottom","minHeight","stackTitle","stack","more","marginTop","About","classes","t","useTranslation","react_default","a","createElement","Fragment","Typography","className","concat","title","color","Header","align","noWrap","social","display","justifyContent","link","alignItems","green","memo","name","icon","GitHubIcon","url","TwitterIcon","LinkedInIcon","map","s","index","Link","href","key","contact","flexDirection","email","button","border","Contact","Button","variant","initLang","savedLang","window","localStorage","getItem","includes","i18n","use","initReactI18next","init","resources","lng","fallbackLng","interpolation","escapeValue","gray","buttonSelected","LanguageButton","_ref","language","setState","isSelected","useCallback","lang","changeLanguage","l","prevState","objectSpread","setItem","onClick","App","_useState","useState","_useState2","slicedToArray","state","components_LanguageButton","components_Header","components_About","components_Contact","components_Social","Boolean","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.56e214f2.chunk.js","sourcesContent":["import React from 'react';\nimport { Typography, makeStyles } from '@material-ui/core';\nimport i18next from 'i18next';\nimport { useTranslation } from 'react-i18next';\n\nconst useStyles = makeStyles((theme) => ({\n  main: {\n    width: '100%',\n    paddingLeft: '10rem',\n    paddingRight: '10rem',\n    [theme.breakpoints.down('sm')]: {\n      paddingLeft: '2rem',\n      paddingRight: '2rem',\n    },\n  },\n  about: {\n    fontSize: '1.5rem',\n    fontWeight: 'bold',\n    lineHeight: '2rem',\n    marginBottom: '2rem',\n    minHeight: '8rem',\n    [theme.breakpoints.down('sm')]: {\n      fontSize: '1rem',\n      minHeight: '4rem',\n    },\n  },\n  stackTitle: {\n    fontSize: '1rem',\n    marginBottom: '1rem',\n    [theme.breakpoints.down('sm')]: {\n      fontSize: '0.75rem',\n    },\n  },\n  stack: {\n    fontSize: '1rem',\n    marginBottom: '0.5rem',\n    [theme.breakpoints.down('sm')]: {\n      fontSize: '0.75rem',\n    },\n  },\n  more: {\n    fontSize: '1rem',\n    marginTop: '2rem',\n    marginBottom: '2rem',\n    minHeight: '3rem',\n    [theme.breakpoints.down('sm')]: {\n      fontSize: '0.75rem',\n    },\n  },\n}));\n\nconst About: React.FC = () => {\n  const classes = useStyles({});\n  const { t }: { t: i18next.TFunction } = useTranslation();\n  const FRONTEND = 'React, AngularJS, Angular, JavaScript, Typescript, Redux';\n  const BACKEND = 'Ruby, Ruby on Rails, RSpec';\n  const STYLE = 'HTML5, CSS3, Flexbox, Bootstrap, Material-UI';\n  const DB = 'SQL, MySQL, PostgreSQL';\n  const DEPLOY = 'AWS, Heroku, Jenkins';\n  const WORK = 'Scrum, Agile, TDD, Unit Testing';\n\n  return (\n    <>\n      <Typography className={`${classes.main} ${classes.about}`}>{t('about')}</Typography>\n      <Typography className={`${classes.main} ${classes.stackTitle}`}>\n        {t('stack-title')}\n      </Typography>\n      <Typography className={`${classes.main} ${classes.stack}`}>{FRONTEND}</Typography>\n      <Typography className={`${classes.main} ${classes.stack}`}>{BACKEND}</Typography>\n      <Typography className={`${classes.main} ${classes.stack}`}>{STYLE}</Typography>\n      <Typography className={`${classes.main} ${classes.stack}`}>{DB}</Typography>\n      <Typography className={`${classes.main} ${classes.stack}`}>{DEPLOY}</Typography>\n      <Typography className={`${classes.main} ${classes.stack}`}>{WORK}</Typography>\n      <Typography className={`${classes.main} ${classes.more}`}>{t('more')}</Typography>\n    </>\n  );\n};\n\nexport default About;\n","import React from 'react';\nimport { Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport i18next from 'i18next';\nimport { useTranslation } from 'react-i18next';\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    marginTop: '10vh',\n    width: '100%',\n    fontSize: '7rem',\n    fontWeight: 'bold',\n    lineHeight: '8rem',\n    color: '#fff',\n    marginBottom: '2rem',\n    paddingLeft: '5rem',\n    paddingRight: '5rem',\n    [theme.breakpoints.down('sm')]: {\n      fontSize: '3rem',\n      paddingLeft: '2rem',\n      paddingRight: '2rem',\n    },\n  },\n}));\n\nconst Header: React.FC = () => {\n  const classes = useStyles();\n  const { t }: { t: i18next.TFunction } = useTranslation();\n  return (\n    <Typography align=\"center\" noWrap className={classes.title}>\n      {t('header')}\n    </Typography>\n  );\n};\n\nexport default Header;\n","import React, { memo } from 'react';\nimport './App.css';\nimport { Link } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport TwitterIcon from '@material-ui/icons/Twitter';\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\nimport { green } from './App';\n\nconst useStyles = makeStyles((theme) => ({\n  social: {\n    display: 'flex',\n    justifyContent: 'center',\n    width: '100%',\n    paddingLeft: '5rem',\n    paddingRight: '5rem',\n    marginBottom: '2rem',\n  },\n  link: {\n    display: 'flex',\n    alignItems: 'center',\n    paddingLeft: '1rem',\n    paddingRight: '1rem',\n    color: green,\n  },\n}));\n\nconst Social: React.FC = () => {\n  const classes = useStyles();\n\n  const social = [\n    { name: 'GitHub', icon: GitHubIcon, url: 'https://github.com/tommybernaciak' },\n    { name: 'Twitter', icon: TwitterIcon, url: 'https://twitter.com/tommybernaciak' },\n    { name: 'LinkedIn', icon: LinkedInIcon, url: 'https://www.linkedin.com/in/tommy-bernaciak/' },\n  ];\n  return (\n    <div className={classes.social}>\n      {social.map((s, index) => (\n        <Link display=\"block\" className={classes.link} href={s.url} key={index}>\n          <s.icon />\n        </Link>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(Social);\n","import React from 'react';\nimport './App.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Typography, Button } from '@material-ui/core';\nimport i18next from 'i18next';\nimport { useTranslation } from 'react-i18next';\nimport { green } from './App';\n\nconst useStyles = makeStyles(() => ({\n  contact: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    width: '100%',\n    paddingLeft: '5rem',\n    paddingRight: '5rem',\n    marginBottom: '2rem',\n  },\n  title: {\n    fontSize: '2rem',\n    fontWeight: 'bold',\n    lineHeight: '2rem',\n    color: '#fff',\n    marginBottom: '2rem',\n  },\n  email: {\n    fontSize: '1rem',\n    fontWeight: 'bold',\n    lineHeight: '1rem',\n    color: '#fff',\n    marginBottom: '2rem',\n  },\n  button: {\n    border: `thin solid ${green}`,\n    color: green,\n  },\n}));\n\nconst Contact: React.FC = () => {\n  const classes = useStyles();\n  const { t }: { t: i18next.TFunction } = useTranslation();\n  const PHONE = '+48 666 393 797';\n  const PHONE_HREF = 'tel:+48666393797';\n  const EMAIL = 'contact@tommybernaciak.com';\n\n  return (\n    <div className={classes.contact}>\n      <Typography align=\"center\" noWrap className={classes.title}>\n        {t('contact-title')}\n      </Typography>\n      <Typography align=\"center\" noWrap className={classes.email}>\n        {EMAIL}\n      </Typography>\n      <Button href={PHONE_HREF} variant=\"outlined\" className={classes.button}>\n        {PHONE}\n      </Button>\n    </div>\n  );\n};\n\nexport default Contact;\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport resources from '../assets/resource.json';\n\nexport const initLang = (): string => {\n  const defaultLang = 'en';\n  const acceptedLang = ['en', 'pl'];\n  const savedLang = window.localStorage.getItem('language');\n  if (savedLang && acceptedLang.includes(savedLang)) {\n    return savedLang;\n  }\n  return defaultLang;\n};\n\nexport const getLang = () => window.localStorage.getItem('language');\n\nexport const changeLang = (language: string): void => {\n  window.localStorage.setItem('language', language);\n  i18n.changeLanguage(language);\n};\n\ni18n.use(initReactI18next).init({\n  resources,\n  lng: initLang(),\n  fallbackLng: 'en',\n\n  interpolation: {\n    escapeValue: false,\n  },\n});\n\nexport default i18n;\n","import React, { Dispatch, SetStateAction, useCallback } from 'react';\nimport './App.css';\nimport { Button } from '@material-ui/core';\nimport { changeLang } from '../utils/i18next';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { IState } from './App';\nimport { green, gray } from './App';\n\ninterface IProps {\n  language: string;\n  setState: Dispatch<SetStateAction<IState>>;\n}\n\nconst useStyles = makeStyles(() => ({\n  button: {\n    color: gray,\n  },\n  buttonSelected: {\n    color: green,\n  },\n}));\n\nconst LanguageButton: React.FC<IProps> = ({ language, setState }) => {\n  const classes = useStyles();\n  const isSelected = useCallback((lang: string) => language === lang, [language]);\n\n  const changeLanguage = useCallback(\n    (l: string) => {\n      setState((prevState) => {\n        return { ...prevState, lang: l };\n      });\n      changeLang(l);\n    },\n    [setState]\n  );\n\n  return (\n    <div>\n      <Button\n        className={isSelected('pl') ? classes.buttonSelected : classes.button}\n        onClick={() => changeLanguage('pl')}\n      >\n        pl\n      </Button>\n      <Button\n        className={isSelected('en') ? classes.buttonSelected : classes.button}\n        onClick={() => changeLanguage('en')}\n      >\n        en\n      </Button>\n    </div>\n  );\n};\n\nexport default LanguageButton;\n","import React, { useState } from 'react';\nimport './App.css';\nimport About from './About';\nimport Header from './Header';\nimport Social from './Social';\nimport Contact from './Contact';\nimport LanguageButton from './LanguageButton';\nimport { initLang } from '../utils/i18next';\n\nexport const green = '#2ab859';\nexport const gray = '#bcbcbc';\n\nexport interface IState {\n  lang: string;\n}\n\nconst App: React.FC = () => {\n  const [state, setState] = useState<IState>({ lang: initLang() });\n  return (\n    <div className=\"main\">\n      <LanguageButton language={state.lang} setState={setState} />\n      <Header />\n      <About />\n      <Contact />\n      <Social />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./utils/i18next\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}