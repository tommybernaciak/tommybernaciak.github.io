{"version":3,"sources":["constants.ts","components/top-navbar/TopNavbar.tsx","components/about/About.tsx","components/blog/Blog.tsx","components/App.tsx","serviceWorker.ts","utils/i18next.ts","index.tsx"],"names":["PAGE","TopNavbar","_ref","Object","objectDestructuringEmpty","react_default","a","createElement","className","About","onClick","window","open","href","Blog","App","_useState","useState","ABOUT","_useState2","slicedToArray","page","setPage","t","useTranslation","top_navbar_TopNavbar","about_About","BLOG","blog_Blog","renderPage","Boolean","location","hostname","match","i18n","use","initReactI18next","init","resources","lng","savedLang","localStorage","getItem","includes","initLang","fallbackLng","interpolation","escapeValue","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8QAAYA,iECWGC,EARa,SAAAC,GAC1B,OADmCC,OAAAC,EAAA,EAAAD,CAAAD,GAEjCG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAf,qBCuCSC,EA1CS,WACtB,OACEJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAf,SACAH,EAAAC,EAAAC,cAAA,mFACAF,EAAAC,EAAAC,cAAA,kEAEAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASE,QAAS,kBAAMC,OAAOC,KAAK,gCAAnD,aAGAP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASE,QAAS,kBAAMC,OAAOC,KAAK,gCAAnD,aAGAP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASE,QAAS,kBAAMC,OAAOC,KAAK,2BAAnD,SAIFP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASE,QAAS,kBAAMC,OAAOC,KAAK,0BAAnD,OAGAP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASE,QAAS,kBAAMC,OAAOC,KAAK,oCAAnD,kBAGAP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASE,QAAS,kBAAMC,OAAOC,KAAK,2BAAnD,WAKFP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAf,WACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,gDACAF,EAAAC,EAAAC,cAAA,uCACAF,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,KAAGM,KAAK,oBAAR,uBC3BKC,EARQ,WACrB,OACET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,6BHNMP,wDI6DGe,EApDO,WAAM,IAAAC,EACFC,mBAAejB,EAAKkB,OADlBC,EAAAhB,OAAAiB,EAAA,EAAAjB,CAAAa,EAAA,GACnBK,EADmBF,EAAA,GACbG,EADaH,EAAA,GAElBI,EAAgCC,cAAhCD,EAYR,OACElB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAACkB,EAAD,OAEFpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaE,QAAS,kBAAMY,EAAQtB,EAAKkB,SACrDK,EAAE,iBAKLlB,EAAAC,EAAAC,cAAA,OACEC,UAAU,aACVE,QAAS,kBAAMC,OAAOC,KAAK,kDAF7B,YAMAP,EAAAC,EAAAC,cAAA,OACEC,UAAU,aACVE,QAAS,kBAAMC,OAAOC,KAAK,wCAF7B,WAMAP,EAAAC,EAAAC,cAAA,OACEC,UAAU,aACVE,QAAS,kBAAMC,OAAOC,KAAK,uCAF7B,WAOFP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WA1CF,WACjB,OAAQa,GACN,KAAKrB,EAAKkB,MACR,OAAOb,EAAAC,EAAAC,cAACmB,EAAD,MAET,KAAK1B,EAAK2B,KACR,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,OAoCmBC,OC3CdC,QACW,cAA7BnB,OAAOoB,SAASC,UAEe,UAA7BrB,OAAOoB,SAASC,UAEhBrB,OAAOoB,SAASC,SAASC,MACvB,8ECMNC,IAAKC,IAAIC,KAAkBC,KAAK,CAC9BC,YACAC,IAtBsB,WACtB,IAAMC,EAAY7B,OAAO8B,aAAaC,QAAQ,YAC9C,GAAIF,EACF,OAAOA,EAKT,MADqB,CAAC,KAAM,MACXG,SAFG,gBAEpB,EAcKC,GACLC,YAAa,KAEbC,cAAe,CACbC,aAAa,KAIFb,EAAf,EC3BAc,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SFkI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.88cdfe73.chunk.js","sourcesContent":["export enum PAGE {\n  ABOUT = \"about\",\n  BLOG = \"blog\"\n}\n","import React from 'react';\nimport './../App.css';\n\nconst TopNavbar: React.FC = ({}) => {\n  return (\n    <div className=\"navbar\">\n      <div className=\"navbar-heading\">Tommy Bernaciak</div>\n    </div>\n  );\n};\n\nexport default TopNavbar;\n","import React from 'react';\nimport './../App.css';\n\nconst About: React.FC = () => {\n  return (\n    <div className=\"content-box\">\n      <div className=\"content-heading\">About</div>\n      <p>Hi, my name is Tommy and I am a software engineer and a web developer.</p>\n      <p>I'm proud to have worked with some awesome companies:</p>\n\n      <div className=\"button-group\">\n        <div className=\"button\" onClick={() => window.open('https://www.binarapps.com/')}>\n          BINARAPPS\n        </div>\n        <div className=\"button\" onClick={() => window.open('https://www.stratajet.com/')}>\n          STRATAJET\n        </div>\n        <div className=\"button\" onClick={() => window.open('https://www.gabi.com/')}>\n          GABI\n        </div>\n      </div>\n      <div className=\"button-group\">\n        <div className=\"button\" onClick={() => window.open('https://www.abb.com/')}>\n          ABB\n        </div>\n        <div className=\"button\" onClick={() => window.open('https://www.biotechnologia.pl/')}>\n          BIO-TECH MEDIA\n        </div>\n        <div className=\"button\" onClick={() => window.open('http://www.lokoom.eu/')}>\n          LOKOOM\n        </div>\n      </div>\n\n      <div className=\"content-heading\">Contact</div>\n      <div className=\"contact card\">\n        <p>tommybernaciak.com Tomasz Bernaciak</p>\n        <p>contact@tommybernaciak.com</p>\n        <p>\n          <a href=\"tel:+48666393797\">+48 666 393 797</a>\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default About;\n","import React from \"react\";\nimport \"./../App.css\";\n\nconst Blog: React.FC = () => {\n  return (\n    <div className=\"content-box card\">\n      <p>Blog</p>\n    </div>\n  );\n};\n\nexport default Blog;\n","import React, { useState } from 'react';\nimport './App.css';\nimport { TopNavbar } from './top-navbar';\nimport { About } from './about';\nimport { Blog } from './blog';\nimport { PAGE } from './../constants';\nimport i18next from 'i18next';\nimport { useTranslation } from 'react-i18next';\n\nconst App: React.FC = () => {\n  const [page, setPage] = useState<PAGE>(PAGE.ABOUT);\n  const { t }: { t: i18next.TFunction } = useTranslation();\n\n  const renderPage = () => {\n    switch (page) {\n      case PAGE.ABOUT: {\n        return <About />;\n      }\n      case PAGE.BLOG: {\n        return <Blog />;\n      }\n    }\n  };\n  return (\n    <div className=\"App\">\n      <div className=\"wrapper\">\n        <TopNavbar />\n      </div>\n      <div className=\"content\">\n        <div>\n          <div className=\"nav-button\" onClick={() => setPage(PAGE.ABOUT)}>\n            {t('about-button')}\n          </div>\n          {/* <div className=\"nav-button\" onClick={() => setPage(PAGE.BLOG)}>\n            Blog\n          </div> */}\n          <div\n            className=\"nav-button\"\n            onClick={() => window.open('https://www.linkedin.com/in/tommy-bernaciak/')}\n          >\n            LinkedIn\n          </div>\n          <div\n            className=\"nav-button\"\n            onClick={() => window.open('https://twitter.com/tommybernaciak')}\n          >\n            Twitter\n          </div>\n          <div\n            className=\"nav-button\"\n            onClick={() => window.open('https://github.com/tommybernaciak')}\n          >\n            GitHub\n          </div>\n        </div>\n        <div className=\"wrapper\">{renderPage()}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport resources from \"../assets/resource.json\";\n\nexport const initLang = (): string | undefined => {\n  const savedLang = window.localStorage.getItem(\"language\");\n  if (savedLang) {\n    return savedLang;\n  }\n\n  const browserLang = \"en\";\n  const acceptedLang = [\"en\", \"pl\"];\n  if (acceptedLang.includes(browserLang)) {\n    return browserLang;\n  }\n};\n\nexport const getLang = (state: { language: string }) => state.language;\n\nexport const changeLang = (language: string): void => {\n  window.localStorage.setItem(\"language\", language);\n  i18n.changeLanguage(language);\n};\n\ni18n.use(initReactI18next).init({\n  resources,\n  lng: initLang(),\n  fallbackLng: \"en\",\n\n  interpolation: {\n    escapeValue: false\n  }\n});\n\nexport default i18n;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./utils/i18next\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}